var EmailsEditor=function(t){var n={};function e(r){if(n[r])return n[r].exports;var o=n[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,e),o.l=!0,o.exports}return e.m=t,e.c=n,e.d=function(t,n,r){e.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:r})},e.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.t=function(t,n){if(1&n&&(t=e(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(e.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var o in t)e.d(r,o,function(n){return t[n]}.bind(null,o));return r},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},e.p="",e(e.s=0)}([function(t,n,e){var r=e(5).default;t.exports=r},function(t,n,e){var r=e(2),o=e(3);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[t.i,o,""]]);var i={insert:"head",singleton:!1},a=(r(o,i),o.locals?o.locals:{});t.exports=a},function(t,n,e){"use strict";var r,o=function(){return void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r},i=function(){var t={};return function(n){if(void 0===t[n]){var e=document.querySelector(n);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(t){e=null}t[n]=e}return t[n]}}(),a=[];function c(t){for(var n=-1,e=0;e<a.length;e++)if(a[e].identifier===t){n=e;break}return n}function s(t,n){for(var e={},r=[],o=0;o<t.length;o++){var i=t[o],s=n.base?i[0]+n.base:i[0],l=e[s]||0,u="".concat(s," ").concat(l);e[s]=l+1;var d=c(u),f={css:i[1],media:i[2],sourceMap:i[3]};-1!==d?(a[d].references++,a[d].updater(f)):a.push({identifier:u,updater:x(f,n),references:1}),r.push(u)}return r}function l(t){var n=document.createElement("style"),r=t.attributes||{};if(void 0===r.nonce){var o=e.nc;o&&(r.nonce=o)}if(Object.keys(r).forEach((function(t){n.setAttribute(t,r[t])})),"function"==typeof t.insert)t.insert(n);else{var a=i(t.insert||"head");if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(n)}return n}var u,d=(u=[],function(t,n){return u[t]=n,u.filter(Boolean).join("\n")});function f(t,n,e,r){var o=e?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(t.styleSheet)t.styleSheet.cssText=d(n,o);else{var i=document.createTextNode(o),a=t.childNodes;a[n]&&t.removeChild(a[n]),a.length?t.insertBefore(i,a[n]):t.appendChild(i)}}function p(t,n,e){var r=e.css,o=e.media,i=e.sourceMap;if(o?t.setAttribute("media",o):t.removeAttribute("media"),i&&btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleSheet)t.styleSheet.cssText=r;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(r))}}var m=null,v=0;function x(t,n){var e,r,o;if(n.singleton){var i=v++;e=m||(m=l(n)),r=f.bind(null,e,i,!1),o=f.bind(null,e,i,!0)}else e=l(n),r=p.bind(null,e,n),o=function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)};return r(t),function(n){if(n){if(n.css===t.css&&n.media===t.media&&n.sourceMap===t.sourceMap)return;r(t=n)}else o()}}t.exports=function(t,n){(n=n||{}).singleton||"boolean"==typeof n.singleton||(n.singleton=o());var e=s(t=t||[],n);return function(t){if(t=t||[],"[object Array]"===Object.prototype.toString.call(t)){for(var r=0;r<e.length;r++){var o=c(e[r]);a[o].references--}for(var i=s(t,n),l=0;l<e.length;l++){var u=c(e[l]);0===a[u].references&&(a[u].updater(),a.splice(u,1))}e=i}}}},function(t,n,e){(n=e(4)(!1)).push([t.i,'.form-container{width:600px;height:400px;margin:20px}.form{display:flex;flex-direction:column;box-shadow:0 10px 20px 0 rgba(0,0,0,0.3);border-radius:16px 16px 16px 16px;font:400 14px/24px Open Sans,sans-serif}.form__top{flex:0 1 250px;padding:50px 50px 0px 50px;border-radius:16px 16px 0px 0px;background-color:#f8f8f7}.form__bottom{flex:0 1 75px;padding:12.5px 50px 12.5px 50px;border-radius:0px 0px 16px 16px;background-color:white;display:flex;justify-content:flex-start;align-items:center}.form__header{height:50px;display:flex;justify-content:flex-start;align-items:center;font-size:20px}.form__header .bold-text{font-weight:bold}.form__editor{height:170px;margin-bottom:30px;display:flex;flex-wrap:wrap;justify-content:flex-start;align-content:flex-start;background-color:white;border-radius:4px;border:1px solid #c3c1d0}.form__editor__input{display:inline-block;flex:1 1 auto;margin:3px;border:none;outline:none;line-height:24px}.form__editor__email{background-color:#e0eaff;display:flex;padding:0px 10px;margin:5px 3px;border:none;border-radius:12px;outline:none;line-height:24px}.form__editor__remover::after{content:"×";font-size:large;padding:0px 5px;cursor:pointer}.form__footer{height:100%;display:flex;justify-content:flex-start;align-items:center}.button_primary{color:white;background-color:#4262FF;border-color:#4262FF;border-radius:4px;border:1px solid;padding:10px 20px 10px 20px;margin:0px 10px;text-align:center;font:400 14px/24px Open Sans,sans-serif;cursor:pointer}\n',""]),t.exports=n},function(t,n,e){"use strict";t.exports=function(t){var n=[];return n.toString=function(){return this.map((function(n){var e=function(t,n){var e=t[1]||"",r=t[3];if(!r)return e;if(n&&"function"==typeof btoa){var o=(a=r,c=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),s="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(c),"/*# ".concat(s," */")),i=r.sources.map((function(t){return"/*# sourceURL=".concat(r.sourceRoot||"").concat(t," */")}));return[e].concat(i).concat([o]).join("\n")}var a,c,s;return[e].join("\n")}(n,t);return n[2]?"@media ".concat(n[2]," {").concat(e,"}"):e})).join("")},n.i=function(t,e,r){"string"==typeof t&&(t=[[null,t,""]]);var o={};if(r)for(var i=0;i<this.length;i++){var a=this[i][0];null!=a&&(o[a]=!0)}for(var c=0;c<t.length;c++){var s=[].concat(t[c]);r&&o[s[0]]||(e&&(s[2]?s[2]="".concat(e," and ").concat(s[2]):s[2]=e),n.push(s))}},n}},function(t,n,e){"use strict";e.r(n);e(1);var r=function(t){console.log("Build -- [Header] -- start");var n="\n        <div class=".concat("form__header",'>\n            Share <span class="bold-text">   ').concat(t,"   </span> with others\n        </div>\n    ");return console.log("Build -- [Header] -- end"),n},o=function t(n){console.log("Build -- [Editor] -- start");var e="\n        <div class=".concat(t.EDITOR_CLASS,' data-ns="editor">\n            ').concat(t.innerTemplate(n),"\n        </div>\n    ");return console.log("Build -- [Editor] -- end"),e};o.EDITOR_CLASS="form__editor",o.INPUT_CLASS="form__editor__input",o.EMAIL_CLASS="form__editor__email",o.REMOVER_CLASS="form__editor__remover",o.innerTemplate=function(t){var n=0;return t.reduce((function(t,e){return t+"\n        <div class=".concat(o.EMAIL_CLASS," data-key=").concat(n++,"> \n            <span> ").concat(e," </span>\n            <span class=").concat(o.REMOVER_CLASS," data-ns=").concat("REMOVE","></span>\n        </div>\n    ")}),"")+"\n        <input class=".concat(o.INPUT_CLASS,' type="text" placeholder="add more people..."></input>\n    ')};var i=o,a=function(t){console.log("Build -- [Button] -- start");var n='\n        <button type="button" class='.concat("button_primary"," data-ns=").concat("ADD",">\n            ").concat(t,"\n        </button>\n    ");return console.log("Build -- [Button] -- end"),n},c=function(){console.log("Build -- [Footer] -- start");var t="\n        <div class=".concat("form__footer",">\n            ").concat(a("Add email"),"\n            ").concat(a("Get emails count"),"\n        </div>\n    ");return console.log("Build -- [Footer] -- end"),t};function s(t){return function(t){if(Array.isArray(t)){for(var n=0,e=new Array(t.length);n<t.length;n++)e[n]=t[n];return e}}(t)||function(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function l(){return(l=Object.assign||function(t){for(var n=1;n<arguments.length;n++){var e=arguments[n];for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])}return t}).apply(this,arguments)}var u=function(t){var n=l({},t);console.log("Build -- [Form] -- start");var e=n.boardName,o=e.replace(/\s/g,""),a=n.emails,u=function(){},d=document.createElement("div");d.setAttribute("id",o),d.setAttribute("class","form-container");var f="\n\t\t<div class=".concat("form",">\t\n\t\t\t<div class=").concat("form__top",">\n\t\t\t\t").concat(r(e),"\n\t\t\t\t").concat(i(a),"\n\t\t\t</div>\n\t\t\t<div class=").concat("form__bottom",">\n\t\t\t\t").concat(c(),"\n\t\t\t</div>\n\t\t</div>\n    ");d.innerHTML=f;return console.log("Build -- [Form] -- end"),{form:d,getEmails:function(){return a},setEmails:function(t){(function(t){document.querySelector("#"+o+" ."+i.EDITOR_CLASS).innerHTML=i.innerTemplate(t)})(a=s(t)),u(a)},subscribe:function(t){u=t}}},d={handle:function(t,n,e,r){var o=f[n+"."+t];"function"==typeof o&&o(e,r)}},f={"click.REMOVE":function(t,n){var e=t.parentNode.dataset.key,r=n.getEmails();r.splice(e,1),n.setEmails(r)},"click.ADD":function(t,n){var e=n.getEmails();e.push("cao@gmail.com"),n.setEmails(e)}},p=d,m={listenOn:function(t,n,e){n.forEach((function(n){t.addEventListener(n,(function(t){var n=t.target,r=t.type,o=n.dataset.ns;console.log("".concat(r," on ").concat(o)),p.handle(o,r,n,e)}))}))}};function v(t,n){if(null==t)return{};var e,r,o=function(t,n){if(null==t)return{};var e,r,o={},i=Object.keys(t);for(r=0;r<i.length;r++)e=i[r],n.indexOf(e)>=0||(o[e]=t[e]);return o}(t,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(r=0;r<i.length;r++)e=i[r],n.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(t,e)&&(o[e]=t[e])}return o}n.default=function(t){var n=t.container,e=v(t,["container"]);console.log("Render -- [EmailsEditor] -- Render in ".concat(n.id," with options ").concat(JSON.stringify(e)));var r=u(e),o=r.form,i=r.getEmails,a=r.setEmails,c=r.subscribe;return n.append(o),m.listenOn(o,["click","keydown"],{setEmails:a,getEmails:i}),console.log("Render -- [EmailsEditor] -- Finishing rendering"),{getEmails:i,setEmails:a,subscribe:c}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,