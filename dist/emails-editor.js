var EmailsEditor=function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=0)}([function(t,e,n){var r=n(5).default;t.exports=r},function(t,e,n){var r=n(2),o=n(3);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[t.i,o,""]]);var i={insert:"head",singleton:!1},a=(r(o,i),o.locals?o.locals:{});t.exports=a},function(t,e,n){"use strict";var r,o=function(){return void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r},i=function(){var t={};return function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}t[e]=n}return t[e]}}(),a=[];function c(t){for(var e=-1,n=0;n<a.length;n++)if(a[n].identifier===t){e=n;break}return e}function l(t,e){for(var n={},r=[],o=0;o<t.length;o++){var i=t[o],l=e.base?i[0]+e.base:i[0],s=n[l]||0,u="".concat(l," ").concat(s);n[l]=s+1;var d=c(u),f={css:i[1],media:i[2],sourceMap:i[3]};-1!==d?(a[d].references++,a[d].updater(f)):a.push({identifier:u,updater:b(f,e),references:1}),r.push(u)}return r}function s(t){var e=document.createElement("style"),r=t.attributes||{};if(void 0===r.nonce){var o=n.nc;o&&(r.nonce=o)}if(Object.keys(r).forEach((function(t){e.setAttribute(t,r[t])})),"function"==typeof t.insert)t.insert(e);else{var a=i(t.insert||"head");if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(e)}return e}var u,d=(u=[],function(t,e){return u[t]=e,u.filter(Boolean).join("\n")});function f(t,e,n,r){var o=n?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(t.styleSheet)t.styleSheet.cssText=d(e,o);else{var i=document.createTextNode(o),a=t.childNodes;a[e]&&t.removeChild(a[e]),a.length?t.insertBefore(i,a[e]):t.appendChild(i)}}function p(t,e,n){var r=n.css,o=n.media,i=n.sourceMap;if(o?t.setAttribute("media",o):t.removeAttribute("media"),i&&btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleSheet)t.styleSheet.cssText=r;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(r))}}var m=null,x=0;function b(t,e){var n,r,o;if(e.singleton){var i=x++;n=m||(m=s(e)),r=f.bind(null,n,i,!1),o=f.bind(null,n,i,!0)}else n=s(e),r=p.bind(null,n,e),o=function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(n)};return r(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;r(t=e)}else o()}}t.exports=function(t,e){(e=e||{}).singleton||"boolean"==typeof e.singleton||(e.singleton=o());var n=l(t=t||[],e);return function(t){if(t=t||[],"[object Array]"===Object.prototype.toString.call(t)){for(var r=0;r<n.length;r++){var o=c(n[r]);a[o].references--}for(var i=l(t,e),s=0;s<n.length;s++){var u=c(n[s]);0===a[u].references&&(a[u].updater(),a.splice(u,1))}n=i}}}},function(t,e,n){(e=n(4)(!1)).push([t.i,'.form-container{width:600px;height:400px;margin:20px}.form{display:flex;flex-direction:column;box-shadow:0 10px 20px 0 rgba(0,0,0,0.3);border-radius:16px 16px 16px 16px;font:400 14px/24px Open Sans,sans-serif}.form__top{flex:0 1 250px;padding:50px 50px 0px 50px;border-radius:16px 16px 0px 0px;background-color:#f8f8f7}.form__bottom{flex:0 1 75px;padding:12.5px 50px 12.5px 50px;border-radius:0px 0px 16px 16px;background-color:white;display:flex;justify-content:flex-start;align-items:center}.form__header{height:50px;display:flex;justify-content:flex-start;align-items:center;font-size:20px}.form__header .bold-text{font-weight:bold}.form__editor{height:170px;margin-bottom:30px;display:flex;flex-wrap:wrap;justify-content:flex-start;align-content:flex-start;background-color:white;border-radius:4px;border:1px solid #c3c1d0}.form__editor__input{display:inline-block;flex:1 1 auto;margin:3px;border:none;outline:none;line-height:24px}.form__editor__email{background-color:#e0eaff;display:flex;padding:0px 10px;margin:5px 3px;border:none;border-radius:12px;outline:none;line-height:24px}.form__editor__email::after{content:"×";font-size:large;padding:0px 5px;cursor:pointer}.form__footer{height:100%;display:flex;justify-content:flex-start;align-items:center}.button_primary{color:white;background-color:#4262FF;border-color:#4262FF;border-radius:4px;border:1px solid;padding:10px 20px 10px 20px;margin:0px 10px;text-align:center;font:400 14px/24px Open Sans,sans-serif;cursor:pointer}\n',""]),t.exports=e},function(t,e,n){"use strict";t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n=function(t,e){var n=t[1]||"",r=t[3];if(!r)return n;if(e&&"function"==typeof btoa){var o=(a=r,c=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),l="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(c),"/*# ".concat(l," */")),i=r.sources.map((function(t){return"/*# sourceURL=".concat(r.sourceRoot||"").concat(t," */")}));return[n].concat(i).concat([o]).join("\n")}var a,c,l;return[n].join("\n")}(e,t);return e[2]?"@media ".concat(e[2]," {").concat(n,"}"):n})).join("")},e.i=function(t,n,r){"string"==typeof t&&(t=[[null,t,""]]);var o={};if(r)for(var i=0;i<this.length;i++){var a=this[i][0];null!=a&&(o[a]=!0)}for(var c=0;c<t.length;c++){var l=[].concat(t[c]);r&&o[l[0]]||(n&&(l[2]?l[2]="".concat(n," and ").concat(l[2]):l[2]=n),e.push(l))}},e}},function(t,e,n){"use strict";n.r(e);n(1);var r=function(t){console.log("Build -- [Header] -- start");var e="\n        <div class=".concat("form__header",'>\n            Share <span class="bold-text">   ').concat(t,"   </span> with others\n        </div>\n    ");return console.log("Build -- [Header] -- end"),e},o=function t(e){console.log("Build -- [Editor] -- start");var n="\n        <div class=".concat(t.EDITOR_CLASS,' data-ns="editor">\n            ').concat(t.innerTemplate(e),"\n        </div>\n    ");return console.log("Build -- [Editor] -- end"),n};o.EDITOR_CLASS="form__editor",o.INPUT_CLASS="form__editor__input",o.EMAIL_CLASS="form__editor__email",o.innerTemplate=function(t){return t.reduce((function(t,e){return t+"\n    <div class=".concat(o.EMAIL_CLASS,"> \n        <span> ").concat(e," </span>\n    </div>\n")}),"")+"\n    <input class=".concat(o.INPUT_CLASS,' type="text" placeholder="add more people..."></input>\n')};var i=o,a=function(t){console.log("Build -- [Button] -- start");var e='\n        <button type="button" class='.concat("button_primary",">\n            ").concat(t,"\n        </button>\n    ");return console.log("Build -- [Button] -- end"),e},c=function(){console.log("Build -- [Footer] -- start");var t="\n        <div class=".concat("form__footer",">\n            ").concat(a("Add email"),"\n            ").concat(a("Get emails count"),"\n        </div>\n    ");return console.log("Build -- [Footer] -- end"),t};function l(t){return function(t){if(Array.isArray(t)){for(var e=0,n=new Array(t.length);e<t.length;e++)n[e]=t[e];return n}}(t)||function(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function s(){return(s=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t}).apply(this,arguments)}var u=function(t){var e=s({},t);console.log("Build -- [Form] -- start");var n=e.boardName,o=n.replace(/\s/g,""),a=e.emails,u=function(){},d=document.createElement("div");d.setAttribute("id",o),d.setAttribute("class","form-container");var f="\n\t\t<div class=".concat("form",">\t\n\t\t\t<div class=").concat("form__top",">\n\t\t\t\t").concat(r(n),"\n\t\t\t\t").concat(i(a),"\n\t\t\t</div>\n\t\t\t<div class=").concat("form__bottom",">\n\t\t\t\t").concat(c(),"\n\t\t\t</div>\n\t\t</div>\n    ");d.innerHTML=f;return console.log("Build -- [Form] -- end"),{form:d,getEmails:function(){return a},setEmails:function(t){(function(t){document.querySelector("#"+o+" ."+i.EDITOR_CLASS).innerHTML=i.innerTemplate(t)})(a=l(t)),u(a)},subscribe:function(t){u=t}}};function d(t,e){if(null==t)return{};var n,r,o=function(t,e){if(null==t)return{};var n,r,o={},i=Object.keys(t);for(r=0;r<i.length;r++)n=i[r],e.indexOf(n)>=0||(o[n]=t[n]);return o}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(r=0;r<i.length;r++)n=i[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(o[n]=t[n])}return o}e.default=function(t){var e=t.container,n=d(t,["container"]);console.log("Render -- [EmailsEditor] -- Render in ".concat(e.id," with options ").concat(JSON.stringify(n)));var r=u(n),o=r.form,i=r.getEmails,a=r.setEmails,c=r.subscribe;return e.append(o),console.log("Render -- [EmailsEditor] -- Finishing rendering"),{getEmails:i,setEmails:a,subscribe:c}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,